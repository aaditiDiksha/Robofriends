{"version":3,"sources":["components/Card.js","components/CardList.js","components/Scroll.js","components/SearchBox.js","components/ErrorBoundary.js","constants.js","containers/App.js","actions.js","reportWebVitals.js","reducers.js","index.js"],"names":["Card","name","email","id","className","alt","src","CardList","robots","cardArray","map","user","i","Scroll","props","style","overflow","border","height","children","SearchBox","onSearchChange","type","placeholder","onChange","ErrorBoundary","state","hasError","error","info","this","setState","Component","CHANGE_SEARCH_FIELD","REQUEST_ROBOTS_PENDING","REQUEST_ROBOTS_SUCCESS","REQUEST_ROBOTS_FAILED","App","onRequestRobots","searchField","isPending","filteredRobots","filter","robot","toLowerCase","includes","connect","searchRobots","requestRobots","dispatch","event","text","target","value","payload","fetch","then","response","json","data","catch","err","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","initialStateSearch","initialStateRobots","logger","createLogger","rootReducer","combineReducers","action","Object","assign","store","createStore","applyMiddleware","thunkMiddleware","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa6f5307.chunk.js","sourcesContent":["import React from 'react';\r\n\r\n\r\n\r\nconst Card =({name, email, id}) => {\r\n   \r\n    return(\r\n    \r\n      <div className ='bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\r\n          <img alt=\"robo\" className = 'photo' src={ `https://robohash.org/${id}?size=200x200 `}/>\r\n        <div>\r\n            <h2>{name}</h2>\r\n            <p>{email}</p>\r\n        </div>\r\n      </div>  \r\n    );\r\n}\r\n\r\nexport default Card; ","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({ robots }) => {\r\n    const cardArray = robots.map((user,i) => {\r\n      return <Card \r\n      key ={i} \r\n      id ={robots[i].id} \r\n      name ={robots[i].name} \r\n      email = {robots[i].email} />\r\n    })\r\n    return(\r\n    <div>\r\n        {cardArray}\r\n    </div>\r\n\r\n    ); \r\n}\r\nexport default CardList;","import React from 'react';\r\n\r\nconst Scroll = (props) => \r\n{\r\n    return (\r\n        <div style = {{ overflow: 'scroll',border: '2px solid black', height: '500px'}}>\r\n            {props.children}\r\n        </div>\r\n    )\r\n\r\n};\r\n\r\nexport default Scroll; ","import React from 'react';\r\n\r\nconst SearchBox = ({ onSearchChange} ) =>{\r\n     return(\r\n      <div className = 'pa2'>\r\n        <input\r\n             className='pa3 ba b--green bg-lightest blue '\r\n             type = ' search' \r\n             placeholder ='Search Robots' \r\n             onChange = {onSearchChange}\r\n        />\r\n      </div>\r\n     );\r\n\r\n}\r\n\r\nexport default SearchBox;","import React , {Component} from 'react';\r\n\r\nclass ErrorBoundary extends Component {\r\n constructor(props){\r\n     super(props);\r\n     this.state = {\r\n         hasError : false\r\n     }\r\n }  \r\n \r\n componentDidCatch(error, info){\r\n     this.setState({ hasError: true})\r\n\r\n }\r\n  render(){\r\n\r\n    if(this.state.hasError){\r\n        return <h1> Oooops. That is not good</h1>\r\n    }\r\n    return this.props.children\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;","export const CHANGE_SEARCH_FIELD = 'CHANGE_SEARCH_FIELD'; \r\nexport const REQUEST_ROBOTS_PENDING = \"REQUEST_ROBOTS_PENDING\";\r\nexport const REQUEST_ROBOTS_SUCCESS = \"REQUEST_ROBOTS_SUCCESS\";\r\nexport const REQUEST_ROBOTS_FAILED = \"REQUEST_ROBOTS_FAILED\";\r\n","import React, { Component} from 'react';\r\nimport {connect} from 'react-redux'\r\nimport  CardList from '../components/CardList';\r\nimport Scroll from '../components/Scroll';\r\nimport SearchBox from '../components/SearchBox';\r\nimport ErrorBoundary from '../components/ErrorBoundary';\r\nimport {requestRobots, setSearchField} from '../actions' \r\n\r\nconst mapStateToProps = state => {\r\n    return {\r\n      searchField: state.searchRobots.searchField,\r\n      robots: state.requestRobots.robots,\r\n      isPending: state.requestRobots.isPending,\r\n      error: state.requestRobots.error,\r\n    };\r\n}\r\nconst mapDispatchToProps = (dispatch) => {\r\n return{\r\n      onSearchChange: (event)=> dispatch(setSearchField(event.target.value)),\r\n      onRequestRobots: () => dispatch(requestRobots())\r\n   }\r\n}\r\nclass App extends Component  {\r\n    \r\n\r\n     componentDidMount()\r\n     {  \r\n        this.props.onRequestRobots()\r\n     }\r\n     \r\n     render() {\r\n        const {searchField, onSearchChange, robots, isPending} = this.props\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        })\r\n        return isPending ?\r\n         <h1>Loading</h1> :\r\n        \r\n       (\r\n      <div className = 'tc'>\r\n       <h1 className='title'>RoboFriends</h1>\r\n       <SearchBox onSearchChange={onSearchChange}/>\r\n      <Scroll>\r\n          <ErrorBoundary>\r\n            <CardList robots = {filteredRobots}/>\r\n           </ErrorBoundary>\r\n       </Scroll> \r\n      </div>\r\n    );\r\n     \r\n   }\r\n}\r\nexport default connect(mapStateToProps, mapDispatchToProps)(App);\r\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n} from \"./constants\";\r\n\r\n//action\r\nexport const setSearchField = (text) =>({\r\n    type: CHANGE_SEARCH_FIELD,\r\n    payload: text\r\n\r\n})\r\n\r\nexport const requestRobots =()=> (dispatch) =>{\r\n    dispatch({ type: REQUEST_ROBOTS_PENDING });\r\n    \r\n         fetch(\"https://jsonplaceholder.typicode.com/users\")\r\n         .then((response) =>\r\n           response.json()\r\n         ).then(data => dispatch({ type: REQUEST_ROBOTS_SUCCESS,payload: data}))\r\n         .catch(err=> dispatch({type: REQUEST_ROBOTS_FAILED, payload: err}));\r\n}\r\n//async actions - redux thunk- to handle asynchronus actions like ajax","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import {\r\n  CHANGE_SEARCH_FIELD,\r\n  REQUEST_ROBOTS_PENDING,\r\n  REQUEST_ROBOTS_FAILED,\r\n  REQUEST_ROBOTS_SUCCESS,\r\n} from \"./constants\";\r\n//redux store store.getstate()\r\nconst initialStateSearch = {\r\n  searchField: \"\",\r\n  \r\n};\r\n\r\nexport const searchRobots = (state = initialStateSearch, action = {}) => {\r\n  switch (action.type) {\r\n    case CHANGE_SEARCH_FIELD:\r\n      return Object.assign({}, state, { searchField: action.payload });\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nconst initialStateRobots = {\r\n  isPending:false,\r\n  robots: [],\r\n  error: ''\r\n};\r\n export const requestRobots =(state=initialStateRobots,action={}) =>{\r\n     switch (action.type) {\r\n       case REQUEST_ROBOTS_PENDING:\r\n         return Object.assign({}, state, { isPending: true });\r\n       case REQUEST_ROBOTS_SUCCESS:\r\n         return Object.assign({}, state, {\r\n           robots: action.payload,\r\n           isPending: false,\r\n         });\r\n       case REQUEST_ROBOTS_FAILED:\r\n         return Object.assign({}, state, {\r\n           error: action.payload,\r\n           isPending: false,\r\n         });\r\n       default:\r\n         return state;\r\n     }\r\n }","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './containers/App';\nimport reportWebVitals from './reportWebVitals';\nimport 'tachyons' ;\nimport {createStore, applyMiddleware, combineReducers} from 'redux';\nimport {Provider } from 'react-redux';\nimport {createLogger} from 'redux-logger'\nimport  thunkMiddleware  from 'redux-thunk';\nimport { searchRobots, requestRobots } from './reducers';\n\n\nconst logger = createLogger();\nconst rootReducer = combineReducers({searchRobots,requestRobots})\nconst store = createStore(rootReducer, applyMiddleware(thunkMiddleware ,logger))\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nreportWebVitals();\n"],"sourceRoot":""}